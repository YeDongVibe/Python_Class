# open() 함수를 사용하여 파일 객체를 만듭니다. 파일을 열 때는 파일 이름과 모드를 지정해야 합니다.

# r: 읽기 모드. 파일을 읽기 위해서 사용합니다. 파일이 존재하지 않으면 오류가 발생합니다.
# w: 쓰기 모드. 파일을 쓰기 위해서 사용합니다. 파일이 이미 존재하면 덮어쓰고, 존재하지 않으면 새로운 파일을 생성합니다.
# a: 추가 모드. 파일의 끝에 내용을 추가하기 위해서 사용합니다. 파일이 이미 존재하면 파일 끝에 내용을 추가하고, 존재하지 않으면 새로운 파일을 생성합니다.
# x: 배타적 생성 모드. 새로운 파일을 생성하기 위해서 사용합니다. 파일이 이미 존재하면 오류가 발생합니다.
# b: 이진 모드. 파일을 바이너리 모드로 엽니다.
# t: 텍스트 모드. 파일을 텍스트 모드로 엽니다. 이것이 기본값입니다.
# +: 읽기와 쓰기 모두를 지원하는 모드입니다. r+, w+, a+와 같은 형태로 사용됩니다.

#================================================================================================================
#파일열기
# 읽기 모드로 파일을 엽니다.
file = open("example.txt", "r")
content = file.read()
print("읽기 모드 예시:")
print(content)
file.close()

#-----------------------------------------------------------------------------------------------------------------
# 쓰기 모드로 파일을 엽니다.
file = open("example.txt", "w")
file.write("This is an example.\n")
file.write("We are writing to a file.\n")
print("쓰기 모드 예시:")
print("파일이 생성되었습니다.")
file.close()

#-----------------------------------------------------------------------------------------------------------------
# 추가 모드로 파일을 엽니다.
file = open("example.txt", "a")
file.write("We are appending to a file.\n")
print("추가 모드 예시:")
print("파일이 열렸고 내용이 추가되었습니다.")
file.close()

#-----------------------------------------------------------------------------------------------------------------
# 배타적 생성 모드로 파일을 엽니다.
file = open("example2.txt", "x")
file.write("This is a new file.\n")
print("배타적 생성 모드 예시:")
print("새로운 파일이 생성되었습니다.")
file.close()

#-----------------------------------------------------------------------------------------------------------------
# 이진 모드로 파일을 엽니다.
file = open("example.bin", "wb")
file.write(b"This is binary data.")
print("이진 모드 예시:")
print("바이너리 파일이 생성되었습니다.")
file.close()

#-----------------------------------------------------------------------------------------------------------------
# 읽기와 쓰기를 지원하는 모드로 파일을 엽니다.
file = open("example.txt", "r+")
content = file.read()
print("읽기와 쓰기를 지원하는 모드 예시:")
print("파일 내용:")
print(content)
file.write("\nWe are writing to the file again.")
file.close()

#================================================================================================================
#파일 읽기
#파일 객체를 사용하여 파일 내용을 읽을 수 있습니다. 다양한 메서드를 사용할 수 있습니다.
# read(): 파일 내용 전체를 문자열로 읽습니다.
# readline(): 파일에서 한 줄을 읽습니다. 파일 끝에 도달하면 빈 문자열을 반환합니다.
# readlines(): 파일 전체를 읽고 각 줄을 문자열의 리스트로 반환합니다.
file = open("example.txt", "r")

#-----------------------------------------------------------------------------------------------------------------
# 파일 내용 전체를 읽습니다.
content = file.read()
print(content)

#-----------------------------------------------------------------------------------------------------------------
# 파일에서 한 줄을 읽습니다.
line = file.readline()
print(line)

#-----------------------------------------------------------------------------------------------------------------
# 파일 전체를 읽고 각 줄을 리스트로 반환합니다.
lines = file.readlines()
print(lines)

file.close()  # 파일을 닫습니다.

#-----------------------------------------------------------------------------------------------------------------
with open("example.txt", "r") as file:
    # 파일 내용 전체를 읽습니다.
    content = file.read()
    print("read() 함수 예시:")
    print(content)

    # 파일에서 한 줄을 읽습니다.
    file.seek(0)  # 파일 포인터를 처음으로 돌립니다.
    line = file.readline()
    print("\nreadline() 함수 예시:")
    print(line)

    # 파일 전체를 읽고 각 줄을 리스트로 반환합니다.
    file.seek(0)  # 파일 포인터를 처음으로 돌립니다.
    lines = file.readlines()
    print("\nreadlines() 함수 예시:")
    print(lines)

#================================================================================================================
#파일 쓰기
# 파일 객체를 사용하여 파일 내용을 씁니다.
# write(): 파일에 문자열을 씁니다.
# writelines(): 파일에 문자열의 리스트를 씁니다.

file = open("example.txt", "w")

# 파일에 문자열을 씁니다.
file.write("Hello, world!\n")
file.write("This is an example file.\n")

# 파일에 문자열의 리스트를 씁니다.
lines = ["We will use it to demonstrate file writing in Python.\n",
         "We can write multiple lines at once.\n"]
file.writelines(lines)

file.close()  # 파일을 닫습니다.


#================================================================================================================
#파일 닫기
#Python에서 파일을 열고 사용한 후에는 반드시 파일을 닫아야 합니다. 파일을 닫지 않으면 파일이 계속해서 열린 상태로 남아 있어서, 다른 프로그램이나 사용자가 해당 파일을 사용하지 못함.

file = open("example.txt", "r")
content = file.read()
file.close()

#-----------------------------------------------------------------------------------------------------------------
#with 문
# with open("example.txt", "r") as file:
#     # 파일을 다루는 코드
with open("example.txt", "r") as file:
    # 파일 내용 전체를 읽습니다.
    content = file.read()
    print(content)

